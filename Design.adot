= Fantasy League Design

== URL
. Test site
.. autos.crazyideas.co.in/
. Production site (NOT YET READY)
.. ipl.crazyideas.co.in/

<<<

= REST API
== API for IPL members
permission::
    can_play_ipl2019

[[member_list]]

=== Leaderboard
. URL
.. member_list/
.. default page
.. +View Leaderboard+ on Home page
.. +Leaderboard+ on Nav bar
. Shows the leaderboard
. Returns *member*.
.. rank (Calculated)
.. member.name
.. member.balance
.. member.points (Calculated)
.. player_purchased (Calculated)
. Order by highest points.

[[my_players]]

=== My Players
. URL
.. my_players/
.. +My Players+ on Nav bar
. Shows the players owned by that member.
. Returns *playerinstance*.
. An option is to release eligible players is provided.
. Order by highest player score.
. For superuser (player with no ownership), the entire list of players is returned.

[[all_players]]

=== All Players
. URL
.. all_players/
.. There is no link provided for this since it is a resource intensive call.
.. The 'auctioneer' function 'Upload Player Ownership' redirects here.
. Shows the ownership of all players.
. Returns *playerinstance*.
. An option is to release eligible players is provided.
. Order by player.number

[[available_players]]

=== Shop
. URL
.. available_players/
.. +Shop+ on Nav bar
. Shows all available players
. Returns *playerinstance*
. An option to invite bid is provided '(Only for auctioneer)'
.. Will be disabled for available players who have already been invited to bid.
. Order by score, cost, base and then name.

[[invite_bids]]

=== Invite Bids
. URL
.. available_players/{playerinstance.id}/invite_bids
. This is a form to invite bids for a player
. Shows the details of 1 player and ask confirmation to invite bids.
. Redirects to <<available_players>>
. Following validations are done.
.. Player status should be 'Available'
.. Player has NOT been invited for bid before
. Following updates are done.
.. player_instance.status = 'Bidding'
.. Check all members with balance < base and auto-populate their bid by NO_BALANCE

<<<

[[remove_players]]

=== Remove Players
. URL
.. my_players/{player_instance_id}/remove/
. This is a form to release a player.
. Shows the details of 1 player owned by player and ask confirmation of release.
. Redirects to <<my_players>>
. Following validations are done.
.. The *player_instance* should exists.
... You cannot remove a player that does NOT exists.
... This player does NOT exists.
.. The *player* should be owned by somebody.
... You can only release players that are owned.
.. The *player* should be owned by the requesting *member*
... You cannot remove this player since you do NOT own him.
.. The *player* is eligible for release (< 50 points)
... {player_instance.player.name} has already scored {player_instance.player.score} points.
... You can only release players with less than 50 points.
... Validate if the auctioneer has enabled removal of players. 'TO DO'
. Following updates are done.
.. Increase *member* balances.
... player_instance.member.balance += player_instance.price
.. Mark the *player* as available
... player_instance.price = 0
... player_instance.status = 'Available'
... player_instance.member = None

<<<

== API for Auctioneer
permission::
    auctioneer

[[update_scores]]

=== Update Scores
. URL
.. update_scores/
.. +Update Scores+ on Nav Bar (only for 'auctioneer')
. This is a form to update the scores of individual players.
. This needs to be done after every match completes.
. Redirects to <<member_list>>
. Following validations are done.
.. The extension of the file should be .csv
... This file is not a .csv file.
.. Order of columns in the csv should be player, score.
... The csv header is not in the proper format.
. Following updates are done.
.. For each player the scores is overwritten.
.. If the player does not exists then the row in csv file is ignored.
.. If the score is NOT a decimal number then the row in csv file is ignored.

=== Upload *members*
. URL
.. member_upload/
.. Upload

=== Upload *players*
. URL
.. player_upload/

=== Upload player ownership
. URL
.. player_ownership_upload/


== Ignore following Sections

=== Bid Players
. /members/{memberInitial}/bids
.. This is a form to submit a bid.
.. Shows the details of 1 player for whom the bid is required.
.. The bid should only be accepted once.
.. If all players have submitted a bid then do further updates
... playerInstance.memberInitial = Member with the highest bid for that player
... playerInstance.price = Second Highest bid amount for that player
... playerInstance.status = PURCHASED
... member.balance -= playerInstance.price
.. It will also show the list of members who still needs to submit the bid.
. /bids
.. Shows all bids for PURCHASED players
.. Order by date and then playerInstanceNumber
.. Also shows who has won the bid

=== API for members with auctioneer permission
. /auction
.. Shows the players available for auction
.. Order by highest player score
.. In the list, an option is provide to invite bid player.
.. This option is disabled if the bid is already in progress
. /auction/{playerInstanceNumber}
.. This is a form to invite a bid. (PUT)
... playerInstance.status = BID
.. Will confirm whether a player's bid needs to be accepted
.. Will throw an exception if the BID is already in progress
. /auction/{playerInstanceNumber}/bids
.. Will show all members and their status whether they have bid or not
.. Will provide an option to submit bid on someone's behalf
.. Redirect to /members/{memberInitial}/bids form




